{"version":3,"sources":["Rect.js","Engine.ts","index.tsx"],"names":["Rect","_ref","x","y","color","size","react_default","a","createElement","fill","stroke","width","height","Cell","Object","classCallCheck","this","dying","createClass","key","value","Engine","cells","_this","rule1","filter","cell","neighbours","forEach","markForDeath","rule3","rule4","sortFn","b","xCoords","map","sort","yCoords","minX","maxX","length","minY","maxY","newCells","cellAt","concat","cell_x","cell_y","y_coords","find","rule2","CELL_SIZE","App","state","started","interval","generation","stop","clearInterval","setState","start","intervalId","setInterval","tick","_this$state","renderCells","getRandomColor","i","assign","onClick","viewBox","xmlns","renderVerticalLines","renderHorizontalLines","end","step","Array","from","Math","ceil","keys","inclusiveRange","x1","y1","x2","y2","Component","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.09b9fcaa.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({ x, y, color, size}) => <rect x={x*size} y={-y*size} fill={color} stroke=\"black\" width={size} height={size}/>;\n","export class Cell {\n  x: number\n  y: number\n  dying: boolean\n\n  constructor(x: number, y: number) {\n    this.x = x\n    this.y = y\n\n    this.dying = false\n  }\n\n  markForDeath() {\n    this.dying = true\n  }\n}\n\nclass Engine {\n  cells: Cell[]\n\n  constructor(cells: Cell[]) {\n    this.cells = cells\n  }\n\n  tick() {\n    this.rule1()\n    this.rule2()\n    this.rule3()\n    this.rule4()\n\n\n    return this.cells.filter(cell => !cell.dying)\n  }\n\n  rule1 = () => {\n    const dyingCells = this.cells.filter(cell => this.neighbours(cell) < 2)\n    dyingCells.forEach(cell => cell.markForDeath())\n  }\n\n  rule2() { this.rule1() }\n\n  rule3 = () => {\n    const dyingCells = this.cells.filter(cell => this.neighbours(cell) > 3)\n    dyingCells.forEach(cell => cell.markForDeath())\n  }\n\n  rule4 = () => {\n    const sortFn = (a: number, b: number) => a - b\n    const xCoords = this.cells.map(cell => cell.x).sort(sortFn)\n    const yCoords = this.cells.map(cell => cell.y).sort(sortFn)\n\n    const minX = xCoords[0] - 1\n    const maxX = xCoords[xCoords.length-1] + 1\n\n    const minY = yCoords[0] - 1\n    const maxY = yCoords[yCoords.length-1] + 1\n\n    let newCells: Cell[] = []\n\n    for (let x = minX; x <= maxX; x++) {\n      for (let y = minY; y <= maxY; y++) {\n        let cell = new Cell(x, y)\n        if (this.neighbours(cell) == 3 && !this.cellAt(x, y)) {\n          newCells = newCells.concat(cell)\n        }\n      }\n    }\n\n    this.cells = this.cells.concat(newCells)\n  }\n\n  neighbours = ({x: cell_x, y: cell_y}: Cell): number => {\n    const x_coords = [cell_x-1, cell_x, cell_x+1]\n    const y_coords = [cell_y-1, cell_y, cell_y+1]\n\n    let neighbours: Cell[] = []\n\n    x_coords.forEach(x => {\n      return y_coords.forEach(y => {\n        if (x == cell_x && y == cell_y) { return }\n        let cell = this.cellAt(x, y)\n        if (cell) {\n          neighbours = neighbours.concat(cell)\n        }\n      })\n    })\n\n    return neighbours.length\n  }\n\n  cellAt = (x: number, y: number) => {\n    return this.cells.find(cell => cell.x == x && cell.y == y)\n  }\n}\n\nexport default Engine\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport Rect from './Rect'\nimport Engine, {Cell} from './Engine';\nimport './style.css';\n\nconst CELL_SIZE = 8;\n\nclass App extends Component {\n  state = {\n    started: false,\n    interval: 0,\n    generation: 0,\n    cells: [\n      new Cell(0, 0),\n      new Cell(-1, 0),\n      new Cell(1, 0),\n\n      new Cell(-1, -1),\n      new Cell(-1, -2),\n\n      new Cell(1, -1),\n      new Cell(1, -2),\n\n    ],\n  }\n\n  getRandomColor() {\n    // var letters = '0123456789ABCDEF';\n    // var color = '#';\n    // for (var i = 0; i < 6; i++) {\n    //   color += letters[Math.floor(Math.random() * 16)];\n    // }\n    return \"#ee0000\";\n    // return color;\n  }\n\n  stop = () => {\n    clearInterval(this.state.interval);\n    this.setState({interval: null, started: false})\n  }\n\n  start = () => {\n    if (!this.state.started) {\n      const intervalId = setInterval(this.tick, 50)\n      this.setState({started: true, interval: intervalId})\n    }\n  }\n\n\n  tick = () => {\n    const {cells, generation} = this.state;\n    const engine = new Engine(cells)\n    const newCells = engine.tick()\n    this.setState({ cells: newCells, generation: generation + 1 })\n\n    if (newCells.length == 0) {\n      this.stop()\n      return\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.start}>Start</button>\n        <button onClick={this.stop}>Stop</button>\n        {/* <button onClick={this.tick}>Tick!</button> */}\n        <p>\n          Generation: {this.state.generation}\n        </p>\n        <svg viewBox=\"-500 -250 1000 1000\" xmlns=\"http://www.w3.org/2000/svg\">\n          {this.renderVerticalLines()}\n          {this.renderHorizontalLines()}\n          {this.renderCells()}\n        </svg>\n      </div>\n    );\n  }\n\n  inclusiveRange (start: number, end: number, step: number) {\n    return Array.from(Array.from(Array(Math.ceil((end-start+1)/step)).keys()), x => start+ x*step);\n  }\n\n  renderVerticalLines() {\n    return this.inclusiveRange(-500, 100, 1).map(x => {\n      return <line x1={CELL_SIZE * x} y1={-250} x2={CELL_SIZE * x} y2={1000} stroke=\"#dedede\" />\n    })\n\n  }\n\n  renderHorizontalLines() {\n    return this.inclusiveRange(-50, 100, 1).map(x => {\n      return <line x1={-500} y1={CELL_SIZE * x} x2={1000} y2={CELL_SIZE * x} stroke=\"#dedede\" />\n    })\n\n  }\n\n  renderCells = () => {\n    const color = this.getRandomColor()\n    return this.state.cells.map((cell, i) => <Rect {...cell} color={color} size={CELL_SIZE} key={i} />)\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}